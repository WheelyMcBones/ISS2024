[unibo.basicomm23.html]
Interaction: permette di astrarre dai dettagli, come il protocollo, per realizzare la logica
	di comunicazione. Occorre quindi stabilire un'interfaccia, ossia un contratto per
	la comunicazione, che dovrà essere implementato da tutte le entità (POJO).
	Tale contratto stabilisce una connessione bidirezionale logica fra le due entità; ciò vale
	indipendentemente dal protocollo (i.e. anche con UDP, che generalmente non richiede 
	una connessione bidirezionale).

Ogni libreria fornisce strumenti e concetti: Interaction è uno di questi.
Tali strumenti possono abbattere i costi di sviluppo.
L'abbattimento dei costi si ottiene proprio inserendo la libreria con i dettagli implementativi 
nella parte sommersa.

"L’aspetto naive consiste nella scrittura di un diverso programma per ogni diverso protocollo, il 
che conduce a un prolificazione di codice ricco di dettagli tecnologici, quando invece la logica
è la stessa."

Per implementare un particolare supporto (i.e. comunicazione con "Interaction" via TCP), lo si
richiede ad una particolare Factory. A questo punto, il "come" è svolto dall'oggetto fornito 
dalla factory.

[QakService24WithInteraction.html --> Dai protocolli a Interaction]
Qui vediamo i metodi di supporto alla comunicazione.
Esercizio:
creare un client TCP che utilizzi la Factory (nella Repo: ServiceCallerTCPwithFactory)
Vedi i parametri nel html.

[ProdConsSystem.html]
Torniamo al ProdCons.
Analisi dei requisiti: in quanto analista dei requisiti, occorre considerare, ad esempio, 
	requisiti riguardanti la locazione di un nodo (es: server su Marte :-S ).

Analisi del problema: occorre, in quanto analisti, analizzare le problematiche legate ai requisiti
e al problema in oggetto.
In questo problema, il problema principale è quali forme di interazione possono esservi fra Prod
e Cons. In entrambe le analisi occorre interagire, quando necessario e in caso di dubbi, 
con il committente.

Quanti modi vi sono per trasmettere l'informazione da Produttore e Consumatore?
- Emissione dell'informazione dal Produttore, con il Consumatore che la "ascolta".
- Richiesta esplicita del Consumatore al Produttore per ricevere informazioni.
La scelta dipende dal grado di conoscenza fra le parti. 

Analizziamo le varie scelte di architettura logica:
- C/S: i Produttori conoscono il Consumatore, non viceversa.
- Pub/Sub e broker: il Consumatore e i Produttori conoscono i broker. 
- Produttori come emettitori di eventi: totale disaccoppiamento.
	Un evento è informazione che un componente emette senza nessuna conoscenza di chi potrà
	riceverla.
	
Tali scenari non sono equivalenti: occorre indicare le differenze per effettuare una scelta, basata
su criteri inizialmente socio-economici :-S .
Si discute quindi sia con il committente, sia con il responsabile, e si giunge ad una conclusione:
tutti gli scenari sono possibili. 
Questa è lo SPRINT0.

Ora, scegliamo una strada e la seguiamo.
Domande:
- Il Consumatore deve inviare una risposta?
Qualora non si invii una risposta, non vi sono garanzie sulla corretta ricezione del messaggio.
E' sufficiente un ACK per poter confermare la ricezione.

- E' meglio elaborare le richieste in modo FIFO? Se si invia una risposta, il Produttore si 
accorge qualora il Consumatore lavori in modo FIFO. Se invece le richieste sono Fire&Forget, no.

PER MARTEDI: CognomeNome_ProdConsAfterAnalysis.pdf
	Scegliamo uno scenario con uno o più Prod connessi via TCP, e ne realizziamo 
	un prototipo.
	Non specificato se Sync/Async -> a discrezione.
	Nella progettazione, vediamo il passaggio dal "cosa" al "come". 





