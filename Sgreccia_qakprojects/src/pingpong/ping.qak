System ping
 
Dispatch shot : shot(D)
Request  gamestart : gamestart (D)
Reply gamestartack  : ack(D) for gamestart
Dispatch short : short(V) 

Context ctxping  ip [host="localhost" port=8014] 
Context ctxpong  ip [host="127.0.0.1" port=8015] 


ExternalQActor pong context ctxpong 
QActor ping context ctxping {
	
	[# val NAME = name #]
	
	State s0 initial{
		println("$name STARTS") color blue
		delay 500 
		request pong -m gamestart : gamestart(hit)
	}
	Transition t0 whenReply gamestartack -> handleAnswer
	 
	State handleDispatch{
//		printCurrentMessage color blue
 		updateResource [# "short($name)" #]
		println ("$name received shot from ${payloadArg(0)}") color blue
		forward pong -m shot: shot(NAME)
	}
	Transition t0 whenMsg shot -> handleDispatch
					whenMsg short -> win
	
	
	State handleAnswer{ 
		printCurrentMessage color blue  
		
		delay 100
		onMsg( gamestartack : ack(D)){ 
			forward ping -m shot: shot(NAME)
		} 
	}
	Transition t0 whenMsg shot -> handleDispatch
	
	State win{
		println("$name HO VINTO!") color red
		[# System.exit(0) #]
	}
}

QActor referee context ctxping{ 
	State s0 initial{
		println("$name STARTS") color blue
		observeResource ping msgid short
	} 
	Transition t0 whenMsg short -> handleUpdate
	 
	State handleUpdate{
//		printCurrentMessage color black
			onMsg(short : short(V)){ 
			println("$name shot from:${payloadArg(0)}") color black
//			[#
//				var msg = "$name: received shot from ${payloadArg(0)}"  
//				File("logping.txt").appendText(msg + "\n")
//			#]
			
		}
	}
	Transition t0 whenTime 2000 -> win
	whenMsg short -> handleUpdate
				
	State win{
		println("Pallina non ricevuta entro lo scadere: Ping Ha VINTO!") color red
		forward ping -m short : short(win)
		[# System.exit(0) #]
	}
}
